<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AchievementTracker.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AchievementTracker.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Achievements/UpdatableCriteria.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Achievements/UpdatableCriteria.cs" />
              <option name="originalContent" value="namespace Achievements;&#10;&#10;// Minimal per-achievement handle interface used by evaluators and produced only via&#10;// AbstractCriterion&lt;TCondition,TContext&gt;. End users do not implement this directly; they&#10;// create handles through Criteria.&lt;Root&gt;.Create(...).&#10;public interface IUpdatableCriterion&#10;{&#10;    string Name { get; }&#10;    bool IsSatisfied { get; }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Achievements;&#10;&#10;// Minimal per-achievement handle interface used by evaluators and produced only via&#10;// AbstractCriterion&lt;TCondition,TContext&gt;. End users do not implement this directly; they&#10;// create handles through Criteria.&lt;Root&gt;.Create(...).&#10;public interface IUpdatableCriterion&#10;{&#10;    string Name { get; }&#10;    bool IsSatisfied { get; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Demo/Program.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Demo/Program.cs" />
              <option name="originalContent" value="using Achievements;&#10;using Demo;&#10;&#10;// Simplified criteria demo using generic CriterionRoot + condition objects.&#10;// Final expected states:&#10;//  - Undead Pressure: locked&#10;//  - Risky Start: UNLOCKED&#10;//  - Bones or Fortune: UNLOCKED&#10;//  - Branching Nemesis: UNLOCKED&#10;//  - Ogre Pressure: UNLOCKED&#10;//  - High Score Master: locked&#10;//  - Grand Master: locked&#10;&#10;// Create per-achievement handles via root criteria registry (condition instances carry progress).&#10;var hKill10Zombies   = Criteria.Kills.Create(&quot;Kill 10 Zombies&quot;, new KillTypeCountCondition(&quot;Zombie&quot;, 10));&#10;var hKill5Zombies    = Criteria.Kills.Create(&quot;Kill 5 Zombies&quot;,  new KillTypeCountCondition(&quot;Zombie&quot;, 5));&#10;var hKill2Skeletons  = Criteria.Kills.Create(&quot;Kill 2 Skeletons&quot;,new KillTypeCountCondition(&quot;Skeleton&quot;, 2));&#10;var hKill5Skeletons  = Criteria.Kills.Create(&quot;Kill 5 Skeletons&quot;,new KillTypeCountCondition(&quot;Skeleton&quot;, 5));&#10;var hKill3Ogres      = Criteria.Kills.Create(&quot;Kill 3 Ogres&quot;,    new KillTypeCountCondition(&quot;Ogre&quot;, 3));&#10;&#10;var hScore5   = Criteria.Score.Create(&quot;Score 5&quot;,   new ScoreAccumulationCondition(5));&#10;var hScore10  = Criteria.Score.Create(&quot;Score 10&quot;,  new ScoreAccumulationCondition(10));&#10;var hScore25  = Criteria.Score.Create(&quot;Score 25&quot;,  new ScoreAccumulationCondition(25));&#10;var hScore50  = Criteria.Score.Create(&quot;Score 50&quot;,  new ScoreAccumulationCondition(50));&#10;var hScore100 = Criteria.Score.Create(&quot;Score 100&quot;, new ScoreAccumulationCondition(100));&#10;&#10;var hDieOnce  = Criteria.Deaths.Create(&quot;Die Once&quot;,  new DeathCountCondition(1));&#10;var hDieTwice = Criteria.Deaths.Create(&quot;Die Twice&quot;, new DeathCountCondition(2));&#10;&#10;// Achievement definitions.&#10;var aUndeadPressure = AchievementBuilder&#10;    .CreateNew(&quot;Undead Pressure&quot;, &quot;Kill 10 zombies AND (Score 10 OR Die 2 times)&quot;)&#10;    .AllOf(&quot;Root&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;        all.AnyOf(&quot;Score10 OR Deaths2&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;Score 10&quot;, hScore10);&#10;            any.Criterion(&quot;Die Twice&quot;, hDieTwice);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var aRiskyStart = AchievementBuilder&#10;    .CreateNew(&quot;Risky Start&quot;, &quot;Score 5 AND Die once&quot;)&#10;    .AllOf(&quot;Both&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;Score 5&quot;, hScore5);&#10;        all.Criterion(&quot;Die Once&quot;, hDieOnce);&#10;    })&#10;    .Build();&#10;&#10;var aBonesOrFortune = AchievementBuilder&#10;    .CreateNew(&quot;Bones or Fortune&quot;, &quot;Kill 2 skeletons OR Score 50&quot;)&#10;    .AnyOf(&quot;Either&quot;, any =&gt;&#10;    {&#10;        any.Criterion(&quot;2 Skeletons&quot;, hKill2Skeletons);&#10;        any.Criterion(&quot;Score 50&quot;, hScore50);&#10;    })&#10;    .Build();&#10;&#10;var aBranchingNemesis = AchievementBuilder&#10;    .CreateNew(&quot;Branching Nemesis&quot;, &quot;Kill 5 skeletons OR 5 zombies&quot;)&#10;    .AnyOf(&quot;Either&quot;, any =&gt;&#10;    {&#10;        any.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;        any.Criterion(&quot;5 Zombies&quot;, hKill5Zombies);&#10;    })&#10;    .Build();&#10;&#10;var aOgrePressure = AchievementBuilder&#10;    .CreateNew(&quot;Ogre Pressure&quot;, &quot;Kill 3 ogres AND Score 25&quot;)&#10;    .AllOf(&quot;Both&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;3 Ogres&quot;, hKill3Ogres);&#10;        all.Criterion(&quot;Score 25&quot;, hScore25);&#10;    })&#10;    .Build();&#10;&#10;var aHighScoreMaster = AchievementBuilder&#10;    .CreateNew(&quot;High Score Master&quot;, &quot;(Score 100) AND (10 Zombies OR 5 Skeletons)&quot;)&#10;    .AllOf(&quot;Root&quot;, root =&gt;&#10;    {&#10;        root.Criterion(&quot;Score 100&quot;, hScore100);&#10;        root.AnyOf(&quot;Kills&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;            any.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var aGrandMaster = AchievementBuilder&#10;    .CreateNew(&quot;Grand Master&quot;, &quot;Score 100, Kill 10 Zombies, and branching extras&quot;)&#10;    .AllOf(&quot;GM Root&quot;, root =&gt;&#10;    {&#10;        root.Criterion(&quot;Score 100&quot;, hScore100);&#10;        root.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;        root.AnyOf(&quot;Ogres OR Mixed&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;3 Ogres&quot;, hKill3Ogres);&#10;            any.AllOf(&quot;Skeleton/Zombie Mix&quot;, all =&gt;&#10;            {&#10;                all.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;                all.Criterion(&quot;5 Zombies&quot;, hKill5Zombies);&#10;            });&#10;        });&#10;        root.AnyOf(&quot;Risk Branch&quot;, any =&gt;&#10;        {&#10;            any.AllOf(&quot;Die/Score Path&quot;, all =&gt;&#10;            {&#10;                all.Criterion(&quot;Die Twice&quot;, hDieTwice);&#10;                all.Criterion(&quot;Score 50&quot;, hScore50);&#10;            });&#10;            any.Criterion(&quot;Score 25&quot;, hScore25);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var achievements = new[]&#10;{&#10;    aUndeadPressure,&#10;    aRiskyStart,&#10;    aBonesOrFortune,&#10;    aBranchingNemesis,&#10;    aOgrePressure,&#10;    aHighScoreMaster,&#10;    aGrandMaster&#10;};&#10;&#10;var tracker = new AchievementTracker();&#10;tracker.OnUnlocked += (a, when) =&gt; Console.WriteLine($&quot;[Unlocked] {a.Name} @ {when:HH:mm:ss}&quot;);&#10;foreach (var a in achievements) tracker.Register(a, evaluateImmediately:false);&#10;&#10;var events = new (string Kind, string Data, int Amount)[]&#10;{&#10;    (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;score&quot;,&quot;+&quot;,3), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;death&quot;,&quot;+&quot;,1), (&quot;score&quot;,&quot;+&quot;,2),&#10;    (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;score&quot;,&quot;+&quot;,5), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Skeleton&quot;,1),&#10;    (&quot;score&quot;,&quot;+&quot;,10), (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;score&quot;,&quot;+&quot;,10),&#10;    (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1),&#10;};&#10;&#10;Console.WriteLine(&quot;Starting simplified achievement simulation...\n&quot;);&#10;var step = 0;&#10;foreach (var e in events)&#10;{&#10;    step++;&#10;    switch (e.Kind)&#10;    {&#10;        case &quot;kill&quot;: Criteria.Kills.Evaluate(e.Data); break;&#10;        case &quot;score&quot;: Criteria.Score.Evaluate(e.Amount); break;&#10;        case &quot;death&quot;: Criteria.Deaths.Evaluate(e.Amount); break;&#10;    }&#10;    tracker.EvaluateAll();&#10;&#10;    Console.WriteLine($&quot;Event {step,-2}: {e.Kind} {e.Data} (+{e.Amount})&quot;);&#10;    foreach (var a in achievements)&#10;        Console.WriteLine($&quot;   * {a.Name}: {(a.IsUnlocked ? &quot;UNLOCKED&quot; : &quot;locked&quot;)}&quot;);&#10;    Console.WriteLine();&#10;}&#10;&#10;Console.WriteLine(&quot;Final States:\n&quot;);&#10;foreach (var a in achievements)&#10;    Console.WriteLine($&quot; - {a.Name}: {(a.IsUnlocked?&quot;UNLOCKED&quot;:&quot;locked&quot;)}&quot;);&#10;" />
              <option name="updatedContent" value="using Achievements;&#10;using Demo;&#10;&#10;// Simplified criteria demo using generic CriterionRoot + condition objects.&#10;// Final expected states:&#10;//  - Undead Pressure: locked&#10;//  - Risky Start: UNLOCKED&#10;//  - Bones or Fortune: UNLOCKED&#10;//  - Branching Nemesis: UNLOCKED&#10;//  - Ogre Pressure: UNLOCKED&#10;//  - High Score Master: locked&#10;//  - Grand Master: locked&#10;&#10;// Create per-achievement handles via root criteria registry (condition instances carry progress).&#10;var hKill10Zombies   = Criteria.Kills.Create(&quot;Kill 10 Zombies&quot;, new KillTypeCountCondition(&quot;Zombie&quot;, 10));&#10;var hKill5Zombies    = Criteria.Kills.Create(&quot;Kill 5 Zombies&quot;,  new KillTypeCountCondition(&quot;Zombie&quot;, 5));&#10;var hKill2Skeletons  = Criteria.Kills.Create(&quot;Kill 2 Skeletons&quot;,new KillTypeCountCondition(&quot;Skeleton&quot;, 2));&#10;var hKill5Skeletons  = Criteria.Kills.Create(&quot;Kill 5 Skeletons&quot;,new KillTypeCountCondition(&quot;Skeleton&quot;, 5));&#10;var hKill3Ogres      = Criteria.Kills.Create(&quot;Kill 3 Ogres&quot;,    new KillTypeCountCondition(&quot;Ogre&quot;, 3));&#10;&#10;var hScore5   = Criteria.Score.Create(&quot;Score 5&quot;,   new ScoreAccumulationCondition(5));&#10;var hScore10  = Criteria.Score.Create(&quot;Score 10&quot;,  new ScoreAccumulationCondition(10));&#10;var hScore25  = Criteria.Score.Create(&quot;Score 25&quot;,  new ScoreAccumulationCondition(25));&#10;var hScore50  = Criteria.Score.Create(&quot;Score 50&quot;,  new ScoreAccumulationCondition(50));&#10;var hScore100 = Criteria.Score.Create(&quot;Score 100&quot;, new ScoreAccumulationCondition(100));&#10;&#10;var hDieOnce  = Criteria.Deaths.Create(&quot;Die Once&quot;,  new DeathCountCondition(1));&#10;var hDieTwice = Criteria.Deaths.Create(&quot;Die Twice&quot;, new DeathCountCondition(2));&#10;&#10;// Achievement definitions.&#10;var aUndeadPressure = AchievementBuilder&#10;    .CreateNew(&quot;Undead Pressure&quot;, &quot;Kill 10 zombies AND (Score 10 OR Die 2 times)&quot;)&#10;    .AllOf(&quot;Root&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;        all.AnyOf(&quot;Score10 OR Deaths2&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;Score 10&quot;, hScore10);&#10;            any.Criterion(&quot;Die Twice&quot;, hDieTwice);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var aRiskyStart = AchievementBuilder&#10;    .CreateNew(&quot;Risky Start&quot;, &quot;Score 5 AND Die once&quot;)&#10;    .AllOf(&quot;Both&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;Score 5&quot;, hScore5);&#10;        all.Criterion(&quot;Die Once&quot;, hDieOnce);&#10;    })&#10;    .Build();&#10;&#10;var aBonesOrFortune = AchievementBuilder&#10;    .CreateNew(&quot;Bones or Fortune&quot;, &quot;Kill 2 skeletons OR Score 50&quot;)&#10;    .AnyOf(&quot;Either&quot;, any =&gt;&#10;    {&#10;        any.Criterion(&quot;2 Skeletons&quot;, hKill2Skeletons);&#10;        any.Criterion(&quot;Score 50&quot;, hScore50);&#10;    })&#10;    .Build();&#10;&#10;var aBranchingNemesis = AchievementBuilder&#10;    .CreateNew(&quot;Branching Nemesis&quot;, &quot;Kill 5 skeletons OR 5 zombies&quot;)&#10;    .AnyOf(&quot;Either&quot;, any =&gt;&#10;    {&#10;        any.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;        any.Criterion(&quot;5 Zombies&quot;, hKill5Zombies);&#10;    })&#10;    .Build();&#10;&#10;var aOgrePressure = AchievementBuilder&#10;    .CreateNew(&quot;Ogre Pressure&quot;, &quot;Kill 3 ogres AND Score 25&quot;)&#10;    .AllOf(&quot;Both&quot;, all =&gt;&#10;    {&#10;        all.Criterion(&quot;3 Ogres&quot;, hKill3Ogres);&#10;        all.Criterion(&quot;Score 25&quot;, hScore25);&#10;    })&#10;    .Build();&#10;&#10;var aHighScoreMaster = AchievementBuilder&#10;    .CreateNew(&quot;High Score Master&quot;, &quot;(Score 100) AND (10 Zombies OR 5 Skeletons)&quot;)&#10;    .AllOf(&quot;Root&quot;, root =&gt;&#10;    {&#10;        root.Criterion(&quot;Score 100&quot;, hScore100);&#10;        root.AnyOf(&quot;Kills&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;            any.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var aGrandMaster = AchievementBuilder&#10;    .CreateNew(&quot;Grand Master&quot;, &quot;Score 100, Kill 10 Zombies, and branching extras&quot;)&#10;    .AllOf(&quot;GM Root&quot;, root =&gt;&#10;    {&#10;        root.Criterion(&quot;Score 100&quot;, hScore100);&#10;        root.Criterion(&quot;10 Zombies&quot;, hKill10Zombies);&#10;        root.AnyOf(&quot;Ogres OR Mixed&quot;, any =&gt;&#10;        {&#10;            any.Criterion(&quot;3 Ogres&quot;, hKill3Ogres);&#10;            any.AllOf(&quot;Skeleton/Zombie Mix&quot;, all =&gt;&#10;            {&#10;                all.Criterion(&quot;5 Skeletons&quot;, hKill5Skeletons);&#10;                all.Criterion(&quot;5 Zombies&quot;, hKill5Zombies);&#10;            });&#10;        });&#10;        root.AnyOf(&quot;Risk Branch&quot;, any =&gt;&#10;        {&#10;            any.AllOf(&quot;Die/Score Path&quot;, all =&gt;&#10;            {&#10;                all.Criterion(&quot;Die Twice&quot;, hDieTwice);&#10;                all.Criterion(&quot;Score 50&quot;, hScore50);&#10;            });&#10;            any.Criterion(&quot;Score 25&quot;, hScore25);&#10;        });&#10;    })&#10;    .Build();&#10;&#10;var achievements = new[]&#10;{&#10;    aUndeadPressure,&#10;    aRiskyStart,&#10;    aBonesOrFortune,&#10;    aBranchingNemesis,&#10;    aOgrePressure,&#10;    aHighScoreMaster,&#10;    aGrandMaster&#10;};&#10;&#10;var tracker = new AchievementTracker();&#10;tracker.OnUnlocked += (a, when) =&gt; Console.WriteLine($&quot;[Unlocked] {a.Name} @ {when:HH:mm:ss}&quot;);&#10;foreach (var a in achievements) tracker.Register(a, evaluateImmediately:false);&#10;&#10;var events = new (string Kind, string Data, int Amount)[]&#10;{&#10;    (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;score&quot;,&quot;+&quot;,3), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;death&quot;,&quot;+&quot;,1), (&quot;score&quot;,&quot;+&quot;,2),&#10;    (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;score&quot;,&quot;+&quot;,5), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Skeleton&quot;,1),&#10;    (&quot;score&quot;,&quot;+&quot;,10), (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Skeleton&quot;,1), (&quot;score&quot;,&quot;+&quot;,10),&#10;    (&quot;kill&quot;,&quot;Ogre&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1), (&quot;kill&quot;,&quot;Zombie&quot;,1),&#10;};&#10;&#10;Console.WriteLine(&quot;Starting simplified achievement simulation...\n&quot;);&#10;var step = 0;&#10;foreach (var e in events)&#10;{&#10;    step++;&#10;    switch (e.Kind)&#10;    {&#10;        case &quot;kill&quot;: Criteria.Kills.Evaluate(e.Data); break;&#10;        case &quot;score&quot;: Criteria.Score.Evaluate(e.Amount); break;&#10;        case &quot;death&quot;: Criteria.Deaths.Evaluate(e.Amount); break;&#10;    }&#10;    tracker.EvaluateAll();&#10;    Console.WriteLine($&quot;Event {step,-2}: {e.Kind} {e.Data} (+{e.Amount})&quot;);&#10;    foreach (var a in achievements)&#10;        Console.WriteLine($&quot;   * {a.Name}: {(a.IsUnlocked ? &quot;UNLOCKED&quot; : &quot;locked&quot;)}&quot;);&#10;    Console.WriteLine();&#10;}&#10;&#10;Console.WriteLine(&quot;Final States:\n&quot;);&#10;foreach (var a in achievements)&#10;    Console.WriteLine($&quot; - {a.Name}: {(a.IsUnlocked?&quot;UNLOCKED&quot;:&quot;locked&quot;)}&quot;);&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>