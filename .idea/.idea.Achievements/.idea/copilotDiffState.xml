<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AchievementTracker.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AchievementTracker.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Achievements/UpdatableCriteria.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Achievements/UpdatableCriteria.cs" />
              <option name="originalContent" value="namespace Achievements;&#10;&#10;// Minimal per-achievement handle interface used by evaluators and produced only via&#10;// AbstractCriterion&lt;TCondition,TContext&gt;. End users do not implement this directly; they&#10;// create handles through Criteria.&lt;Root&gt;.Create(...).&#10;public interface IUpdatableCriterion&#10;{&#10;    string Name { get; }&#10;    bool IsSatisfied { get; }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Achievements;&#10;&#10;// Minimal per-achievement handle interface used by evaluators and produced only via&#10;// AbstractCriterion&lt;TCondition,TContext&gt;. End users do not implement this directly; they&#10;// create handles through Criteria.&lt;Root&gt;.Create(...).&#10;public interface IUpdatableCriterion&#10;{&#10;    string Name { get; }&#10;    bool IsSatisfied { get; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>