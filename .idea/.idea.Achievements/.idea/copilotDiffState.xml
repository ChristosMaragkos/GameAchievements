<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/AchievementTracker.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/AchievementTracker.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;// using YourRegistrarLibrary; // Uncomment and adjust as needed&#10;&#10;public class AchievementTracker&#10;{&#10;    private readonly Dictionary&lt;string, Action&gt; achievementBindings = new();&#10;&#10;    // Example: Bind an achievement to a registry value&#10;    public void BindAchievement(string registryKey, Action onAchieved)&#10;    {&#10;        achievementBindings[registryKey] = onAchieved;&#10;        // RegistrarLibrary.Bind(registryKey, () =&gt; TriggerAchievement(registryKey));&#10;        // Replace above with actual registrar binding logic&#10;    }&#10;&#10;    // Call this when a registry value changes&#10;    public void TriggerAchievement(string registryKey)&#10;    {&#10;        if (achievementBindings.TryGetValue(registryKey, out var action))&#10;        {&#10;            action?.Invoke();&#10;        }&#10;    }&#10;&#10;    // ...other tracking logic...&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Achievements/CriterionSkeleton.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Achievements/CriterionSkeleton.cs" />
              <option name="originalContent" value="namespace Achievements;&#10;&#10;public interface ICriterion;&#10;&#10;public abstract class AbstractCriterion&lt;T&gt; : ICriterion where T : CriterionCondition&lt;T&gt;&#10;{&#10;    protected abstract T Condition { get; }&#10;    &#10;    public virtual bool IsMet(T context)&#10;    {&#10;        return Condition.RequirementsMet(context);&#10;    }&#10;}&#10;&#10;public interface ICondition;&#10;&#10;public abstract class CriterionCondition&lt;T&gt; : ICondition where T : ICondition&#10;{&#10;    public abstract bool RequirementsMet(T contextToCompare);&#10;}&#10;&#10;// Note: Old binary mergers (CriterionMerger.And/Or) have been removed in favor of CompositeEvaluator and the fluent AchievementBuilder." />
              <option name="updatedContent" value="namespace Achievements;&#10;&#10;public interface ICriterion;&#10;&#10;public abstract class AbstractCriterion&lt;T&gt; : ICriterion where T : CriterionCondition&lt;T&gt;&#10;{&#10;    protected abstract T Condition { get; }&#10;    &#10;    public virtual bool IsMet(T context)&#10;    {&#10;        return Condition.RequirementsMet(context);&#10;    }&#10;}&#10;&#10;public interface ICondition;&#10;&#10;public abstract class CriterionCondition&lt;T&gt; : ICondition where T : ICondition&#10;{&#10;    public abstract bool RequirementsMet(T contextToCompare);&#10;}&#10;&#10;// Note: Old binary mergers (CriterionMerger.And/Or) have been removed in favor of CompositeEvaluator and the fluent AchievementBuilder." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Demo/GameCriteria.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Demo/GameCriteria.cs" />
              <option name="originalContent" value="using Achievements;&#10;&#10;namespace Demo;&#10;&#10;// --- Conditions ---&#10;public sealed class KillCountCondition : CriterionCondition&lt;KillCountCondition&gt;&#10;{&#10;    public int Kills { get; init; }&#10;    public int RequiredKills { get; init; }&#10;    public override bool RequirementsMet(KillCountCondition contextToCompare) =&gt;&#10;        contextToCompare.Kills &gt;= RequiredKills;&#10;}&#10;&#10;public sealed class TimePlayedCondition : CriterionCondition&lt;TimePlayedCondition&gt;&#10;{&#10;    public double MinutesPlayed { get; init; }&#10;    public double RequiredMinutes { get; init; }&#10;    public override bool RequirementsMet(TimePlayedCondition contextToCompare) =&gt;&#10;        contextToCompare.MinutesPlayed &gt;= RequiredMinutes;&#10;}&#10;&#10;public sealed class ScoreCondition : CriterionCondition&lt;ScoreCondition&gt;&#10;{&#10;    public int Score { get; init; }&#10;    public int RequiredScore { get; init; }&#10;    public override bool RequirementsMet(ScoreCondition contextToCompare) =&gt;&#10;        contextToCompare.Score &gt;= RequiredScore;&#10;}&#10;&#10;// --- Criteria ---&#10;public sealed class KillCountCriterion : AbstractCriterion&lt;KillCountCondition&gt;&#10;{&#10;    private readonly KillCountCondition _condition;&#10;    public KillCountCriterion(int required) =&gt; _condition = new KillCountCondition { RequiredKills = required };&#10;    protected override KillCountCondition Condition =&gt; _condition;&#10;}&#10;&#10;public sealed class TimePlayedCriterion : AbstractCriterion&lt;TimePlayedCondition&gt;&#10;{&#10;    private readonly TimePlayedCondition _condition;&#10;    public TimePlayedCriterion(double requiredMinutes) =&gt; _condition = new TimePlayedCondition { RequiredMinutes = requiredMinutes };&#10;    protected override TimePlayedCondition Condition =&gt; _condition;&#10;}&#10;&#10;public sealed class ScoreCriterion : AbstractCriterion&lt;ScoreCondition&gt;&#10;{&#10;    private readonly ScoreCondition _condition;&#10;    public ScoreCriterion(int requiredScore) =&gt; _condition = new ScoreCondition { RequiredScore = requiredScore };&#10;    protected override ScoreCondition Condition =&gt; _condition;&#10;}&#10;" />
              <option name="updatedContent" value="using Achievements;&#10;&#10;namespace Demo;&#10;&#10;// --- Conditions ---&#10;public sealed class KillCountCondition : CriterionCondition&lt;KillCountCondition&gt;&#10;{&#10;    public int Kills { get; init; }&#10;    public int RequiredKills { get; init; }&#10;    public override bool RequirementsMet(KillCountCondition contextToCompare) =&gt;&#10;        contextToCompare.Kills &gt;= RequiredKills;&#10;}&#10;&#10;public sealed class TimePlayedCondition : CriterionCondition&lt;TimePlayedCondition&gt;&#10;{&#10;    public double MinutesPlayed { get; init; }&#10;    public double RequiredMinutes { get; init; }&#10;    public override bool RequirementsMet(TimePlayedCondition contextToCompare) =&gt;&#10;        contextToCompare.MinutesPlayed &gt;= RequiredMinutes;&#10;}&#10;&#10;public sealed class ScoreCondition : CriterionCondition&lt;ScoreCondition&gt;&#10;{&#10;    public int Score { get; init; }&#10;    public int RequiredScore { get; init; }&#10;    public override bool RequirementsMet(ScoreCondition contextToCompare) =&gt;&#10;        contextToCompare.Score &gt;= RequiredScore;&#10;}&#10;&#10;// --- Criteria ---&#10;public sealed class KillCountCriterion : AbstractCriterion&lt;KillCountCondition&gt;&#10;{&#10;    private readonly KillCountCondition _condition;&#10;    public KillCountCriterion(int required) =&gt; _condition = new KillCountCondition { RequiredKills = required };&#10;    protected override KillCountCondition Condition =&gt; _condition;&#10;}&#10;&#10;public sealed class TimePlayedCriterion : AbstractCriterion&lt;TimePlayedCondition&gt;&#10;{&#10;    private readonly TimePlayedCondition _condition;&#10;    public TimePlayedCriterion(double requiredMinutes) =&gt; _condition = new TimePlayedCondition { RequiredMinutes = requiredMinutes };&#10;    protected override TimePlayedCondition Condition =&gt; _condition;&#10;}&#10;&#10;public sealed class ScoreCriterion : AbstractCriterion&lt;ScoreCondition&gt;&#10;{&#10;    private readonly ScoreCondition _condition;&#10;    public ScoreCriterion(int requiredScore) =&gt; _condition = new ScoreCondition { RequiredScore = requiredScore };&#10;    protected override ScoreCondition Condition =&gt; _condition;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>